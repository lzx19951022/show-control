"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AbstractCommand_1 = require("../AbstractCommand");
const __1 = require("../..");
const enums_1 = require("../../enums");
class SuperSourceBoxParametersCommand extends AbstractCommand_1.default {
    constructor() {
        super(...arguments);
        this.rawName = 'CSBP';
    }
    updateProps(newProps) {
        this._updateProps(newProps);
    }
    serialize(version) {
        const buffer = Buffer.alloc(24);
        let i = 0;
        if (version >= enums_1.ProtocolVersion.V8_0) {
            i = 1;
            buffer.writeUInt8(this.ssrcId, i + 1);
        }
        buffer.writeUInt16BE(this.flag, 0);
        buffer.writeUInt8(this.boxId, i + 2);
        buffer.writeUInt8(this.properties.enabled ? 1 : 0, i + 3);
        if (i === 1)
            i++; // Needs to be 2 byte aligned now
        buffer.writeUInt16BE(this.properties.source, i + 4);
        buffer.writeInt16BE(this.properties.x, i + 6);
        buffer.writeInt16BE(this.properties.y, i + 8);
        buffer.writeUInt16BE(this.properties.size, i + 10);
        buffer.writeUInt8(this.properties.cropped ? 1 : 0, i + 12);
        buffer.writeUInt16BE(this.properties.cropTop, i + 14);
        buffer.writeUInt16BE(this.properties.cropBottom, i + 16);
        buffer.writeUInt16BE(this.properties.cropLeft, i + 18);
        buffer.writeUInt16BE(this.properties.cropRight, i + 20);
        return buffer;
    }
}
exports.SuperSourceBoxParametersCommand = SuperSourceBoxParametersCommand;
SuperSourceBoxParametersCommand.MaskFlags = {
    enabled: 1 << 0,
    source: 1 << 1,
    x: 1 << 2,
    y: 1 << 3,
    size: 1 << 4,
    cropped: 1 << 5,
    cropTop: 1 << 6,
    cropBottom: 1 << 7,
    cropLeft: 1 << 8,
    cropRight: 1 << 9
};
class SuperSourceBoxParametersUpdateCommand extends AbstractCommand_1.default {
    constructor() {
        super(...arguments);
        this.rawName = 'SSBP';
    }
    deserialize(rawCommand, version) {
        let i = 0;
        if (version >= enums_1.ProtocolVersion.V8_0) {
            i = 2;
            this.ssrcId = rawCommand.readUInt8(0);
        }
        else {
            this.ssrcId = 0;
        }
        this.boxId = rawCommand.readUInt8(i > 0 ? 1 : 0);
        this.properties = {
            enabled: rawCommand[i > 0 ? 2 : 1] === 1,
            source: rawCommand.readUInt16BE(i + 2),
            x: __1.Util.parseNumberBetween(rawCommand.readInt16BE(i + 4), -4800, 4800),
            y: __1.Util.parseNumberBetween(rawCommand.readInt16BE(i + 6), -3400, 3400),
            size: __1.Util.parseNumberBetween(rawCommand.readUInt16BE(i + 8), 70, 1000),
            cropped: rawCommand[i + 10] === 1,
            cropTop: __1.Util.parseNumberBetween(rawCommand.readUInt16BE(i + 12), 0, 18000),
            cropBottom: __1.Util.parseNumberBetween(rawCommand.readUInt16BE(i + 14), 0, 18000),
            cropLeft: __1.Util.parseNumberBetween(rawCommand.readUInt16BE(i + 16), 0, 32000),
            cropRight: __1.Util.parseNumberBetween(rawCommand.readUInt16BE(i + 18), 0, 32000)
        };
    }
    applyToState(state) {
        const supersource = state.video.getSuperSource(this.ssrcId);
        supersource.boxes[this.boxId] = Object.assign({}, this.properties);
        return `video.superSources.${this.ssrcId}.boxes.${this.boxId}`;
    }
}
exports.SuperSourceBoxParametersUpdateCommand = SuperSourceBoxParametersUpdateCommand;
//# sourceMappingURL=SuperSourceBoxParametersCommand.js.map