"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AbstractCommand_1 = require("../../AbstractCommand");
const __1 = require("../../..");
class TransitionPositionCommand extends AbstractCommand_1.default {
    constructor() {
        super(...arguments);
        this.rawName = 'CTPs';
    }
    serialize() {
        const buffer = Buffer.alloc(4);
        buffer.writeUInt8(this.mixEffect, 0);
        buffer.writeUInt16BE(this.properties.handlePosition, 2);
        return buffer;
    }
}
exports.TransitionPositionCommand = TransitionPositionCommand;
class TransitionPositionUpdateCommand extends AbstractCommand_1.default {
    constructor() {
        super(...arguments);
        this.rawName = 'TrPs';
    }
    deserialize(rawCommand) {
        this.mixEffect = __1.Util.parseNumberBetween(rawCommand[0], 0, 3);
        this.properties = {
            inTransition: rawCommand[1] === 1,
            remainingFrames: __1.Util.parseNumberBetween(rawCommand[2], 0, 250),
            handlePosition: __1.Util.parseNumberBetween(rawCommand.readUInt16BE(4), 0, 10000)
        };
    }
    applyToState(state) {
        const mixEffect = state.video.getMe(this.mixEffect);
        mixEffect.transitionFramesLeft = this.properties.remainingFrames;
        mixEffect.transitionPosition = this.properties.handlePosition;
        mixEffect.inTransition = this.properties.inTransition;
        return `video.ME.${this.mixEffect}.transition`;
    }
}
exports.TransitionPositionUpdateCommand = TransitionPositionUpdateCommand;
//# sourceMappingURL=TransitionPositionCommand.js.map