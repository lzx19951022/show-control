/// <reference types="node" />
import { EventEmitter } from 'events';
import { AtemState } from './state';
import AbstractCommand from './commands/AbstractCommand';
import { MediaPlayer } from './state/media';
import { MultiViewerSourceState } from './state/settings';
import { DipTransitionSettings, DVETransitionSettings, MixTransitionSettings, StingerTransitionSettings, SuperSourceBox, TransitionProperties, WipeTransitionSettings, SuperSourceProperties, SuperSourceBorder } from './state/video';
import * as USK from './state/video/upstreamKeyers';
import { InputChannel } from './state/input';
import { DownstreamKeyerGeneral, DownstreamKeyerMask } from './state/video/downstreamKeyers';
import * as Enums from './enums';
import { AudioChannel, AudioMasterChannel } from './state/audio';
export interface AtemOptions {
    address?: string;
    port?: number;
    debug?: boolean;
    externalLog?: (arg0?: any, arg1?: any, arg2?: any, arg3?: any) => void;
}
export declare class Atem extends EventEmitter {
    DEFAULT_PORT: number;
    RECONNECT_INTERVAL: number;
    DEBUG: boolean;
    AUDIO_GAIN_RATE: number;
    event: EventEmitter;
    state: AtemState;
    private socket;
    private dataTransferManager;
    private _log;
    private _sentQueue;
    on: ((event: 'error', listener: (message: any) => void) => this) & ((event: 'connected', listener: () => void) => this) & ((event: 'disconnected', listener: () => void) => this) & ((event: 'stateChanged', listener: (state: AtemState, path: string) => void) => this) & ((event: 'receivedCommand', listener: (cmd: AbstractCommand) => void) => this);
    constructor(options?: AtemOptions);
    connect(address: string, port?: number): Promise<unknown>;
    disconnect(): Promise<void>;
    sendCommand(command: AbstractCommand): Promise<any>;
    changeProgramInput(input: number, me?: number): Promise<any>;
    changePreviewInput(input: number, me?: number): Promise<any>;
    cut(me?: number): Promise<any>;
    autoTransition(me?: number): Promise<any>;
    fadeToBlack(me?: number): Promise<any>;
    setFadeToBlackRate(rate: number, me?: number): Promise<any>;
    autoDownstreamKey(key?: number, isTowardsOnAir?: boolean): Promise<any>;
    setDipTransitionSettings(newProps: Partial<DipTransitionSettings>, me?: number): Promise<any>;
    setDVETransitionSettings(newProps: Partial<DVETransitionSettings>, me?: number): Promise<any>;
    setMixTransitionSettings(newProps: Partial<MixTransitionSettings>, me?: number): Promise<any>;
    setTransitionPosition(position: number, me?: number): Promise<any>;
    previewTransition(on: boolean, me?: number): Promise<any>;
    setTransitionStyle(newProps: Partial<TransitionProperties>, me?: number): Promise<any>;
    setStingerTransitionSettings(newProps: Partial<StingerTransitionSettings>, me?: number): Promise<any>;
    setWipeTransitionSettings(newProps: Partial<WipeTransitionSettings>, me?: number): Promise<any>;
    setAuxSource(source: number, bus?: number): Promise<any>;
    setDownstreamKeyTie(tie: boolean, key?: number): Promise<any>;
    setDownstreamKeyOnAir(onAir: boolean, key?: number): Promise<any>;
    setDownstreamKeyCutSource(input: number, key?: number): Promise<any>;
    setDownstreamKeyFillSource(input: number, key?: number): Promise<any>;
    setDownstreamKeyGeneralProperties(props: Partial<DownstreamKeyerGeneral>, key?: number): Promise<any>;
    setDownstreamKeyMaskSettings(props: Partial<DownstreamKeyerMask>, key?: number): Promise<any>;
    setDownstreamKeyRate(rate: number, key?: number): Promise<any>;
    setTime(hour: number, minute: number, second: number, frame: number): Promise<any>;
    requestTime(): Promise<any>;
    macroContinue(): Promise<any>;
    macroDelete(index?: number): Promise<any>;
    macroInsertUserWait(): Promise<any>;
    macroRun(index?: number): Promise<any>;
    macroStop(): Promise<any>;
    macroStopRecord(): Promise<any>;
    setMultiViewerSource(newProps: Partial<MultiViewerSourceState>, mv?: number): Promise<any>;
    setMediaPlayerSettings(newProps: Partial<MediaPlayer>, player?: number): Promise<any>;
    setMediaPlayerSource(newProps: Partial<{
        sourceType: Enums.MediaSourceType;
        stillIndex: number;
        clipIndex: number;
    }>, player?: number): Promise<any>;
    setMediaClip(index: number, name: string, frames?: number): Promise<any>;
    clearMediaPoolClip(clipId: number): Promise<any>;
    clearMediaPoolStill(stillId: number): Promise<any>;
    setSuperSourceBoxSettings(newProps: Partial<SuperSourceBox>, box?: number, ssrcId?: number): Promise<any>;
    setSuperSourceProperties(newProps: Partial<SuperSourceProperties>, ssrcId?: number): Promise<any>;
    setSuperSourceBorder(newProps: Partial<SuperSourceBorder>, ssrcId?: number): Promise<any>;
    setInputSettings(newProps: Partial<InputChannel>, input?: number): Promise<any>;
    setUpstreamKeyerChromaSettings(newProps: Partial<USK.UpstreamKeyerChromaSettings>, me?: number, keyer?: number): Promise<any>;
    setUpstreamKeyerCutSource(cutSource: number, me?: number, keyer?: number): Promise<any>;
    setUpstreamKeyerFillSource(fillSource: number, me?: number, keyer?: number): Promise<any>;
    setUpstreamKeyerDVESettings(newProps: Partial<USK.UpstreamKeyerDVESettings>, me?: number, keyer?: number): Promise<any>;
    setUpstreamKeyerLumaSettings(newProps: Partial<USK.UpstreamKeyerLumaSettings>, me?: number, keyer?: number): Promise<any>;
    setUpstreamKeyerMaskSettings(newProps: Partial<USK.UpstreamKeyerMaskSettings>, me?: number, keyer?: number): Promise<any>;
    setUpstreamKeyerPatternSettings(newProps: Partial<USK.UpstreamKeyerPatternSettings>, me?: number, keyer?: number): Promise<any>;
    setUpstreamKeyerOnAir(onAir: boolean, me?: number, keyer?: number): Promise<any>;
    setUpstreamKeyerType(newProps: Partial<USK.UpstreamKeyerTypeSettings>, me?: number, keyer?: number): Promise<any>;
    uploadStill(index: number, data: Buffer, name: string, description: string): Promise<unknown>;
    uploadClip(index: number, frames: Array<Buffer>, name: string): Promise<unknown>;
    uploadAudio(index: number, data: Buffer, name: string): Promise<unknown>;
    setAudioMixerInputMixOption(index: number, mixOption: Enums.AudioMixOption): Promise<any>;
    setAudioMixerInputGain(index: number, gain: number): Promise<any>;
    setAudioMixerInputBalance(index: number, balance: number): Promise<any>;
    setAudioMixerInputProps(index: number, props: Partial<AudioChannel>): Promise<any>;
    setAudioMixerMasterGain(gain: number): Promise<any>;
    setAudioMixerMasterProps(props: Partial<AudioMasterChannel>): Promise<any>;
    listVisibleInputs(mode: 'program' | 'preview', me?: number): number[];
    private _mutateState;
    private _resolveCommand;
    private _rejectCommand;
}
