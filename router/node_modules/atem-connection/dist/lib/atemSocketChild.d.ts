/// <reference types="node" />
import { EventEmitter } from 'events';
export declare class AtemSocketChild extends EventEmitter {
    private _connectionState;
    private _debug;
    private _reconnectTimer;
    private _retransmitTimer;
    private _localPacketId;
    private _maxPacketID;
    private _sessionId;
    private _address;
    private _port;
    private _socket;
    private _reconnectInterval;
    private _inFlightTimeout;
    private _maxRetries;
    private _lastReceivedAt;
    private _lastReceivedPacketId;
    private _inFlight;
    private _ackTimer;
    private _hasTimeout;
    private _receivedWithoutAck;
    private _lastAcked;
    constructor(options?: {
        address?: string;
        port?: number;
    });
    connect(address?: string, port?: number): void;
    disconnect(): Promise<void>;
    log(...args: any[]): void;
    readonly nextPacketId: number;
    _sendCommand(serializedCommand: Buffer, trackingId: number): void;
    private _createSocket;
    private _receivePacket;
    private _sendPacket;
    private _attemptAck;
    private _sendAck;
    private _checkForRetransmit;
}
